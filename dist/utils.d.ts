import Multicaller from './utils/multicaller';
import getProvider from './utils/provider';
import { decodeContenthash, validateContent, isValidContenthash, encodeContenthash, resolveENSContentHash, resolveContent } from './utils/contentHash';
import { signMessage, getBlockNumber } from './utils/web3';
export declare const MULTICALL: {
    1: string;
    3: string;
    4: string;
    5: string;
    6: string;
    17: string;
    42: string;
    56: string;
    82: string;
    97: string;
    100: string;
    128: string;
    137: string;
    256: string;
    1337: string;
    wanchain: string;
};
export declare const SNAPSHOT_SUBGRAPH_URL: {
    1: string;
    4: string;
    42: string;
};
export declare function call(provider: any, abi: any[], call: any[], options?: any): Promise<any>;
export declare function multicall(network: string, provider: any, abi: any[], calls: any[], options?: any): Promise<any>;
export declare function subgraphRequest(url: string, query: any, options?: any): Promise<any>;
export declare function ipfsGet(gateway: string, ipfsHash: string, protocolType?: string): Promise<any>;
export declare function sendTransaction(web3: any, contractAddress: string, abi: any[], action: string, params: any[], overrides?: {}): Promise<any>;
export declare function getScores(space: string, strategies: any[], network: string, provider: any, addresses: string[], snapshot?: string): Promise<any[]>;
export declare function validateSchema(schema: any, data: any): true | import("ajv").ErrorObject<string, Record<string, any>>[];
declare const _default: {
    call: typeof call;
    multicall: typeof multicall;
    subgraphRequest: typeof subgraphRequest;
    ipfsGet: typeof ipfsGet;
    sendTransaction: typeof sendTransaction;
    getScores: typeof getScores;
    validateSchema: typeof validateSchema;
    getProvider: typeof getProvider;
    decodeContenthash: typeof decodeContenthash;
    validateContent: typeof validateContent;
    isValidContenthash: typeof isValidContenthash;
    encodeContenthash: typeof encodeContenthash;
    resolveENSContentHash: typeof resolveENSContentHash;
    resolveContent: typeof resolveContent;
    signMessage: typeof signMessage;
    getBlockNumber: typeof getBlockNumber;
    Multicaller: typeof Multicaller;
};
export default _default;
